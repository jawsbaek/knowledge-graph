[project]
name = "knowledge-graph"
version = "0.1.0"
description = "Programming methodology knowledge graph management system using Neo4j, FastAPI, and Streamlit"
readme = "README.md"
authors = [
    { name = "jawsbaek", email = "bshjaws1@gmail.com" }
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "neo4j>=5.22.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "streamlit>=1.28.0",
    "python-multipart>=0.0.6",
    "httpx>=0.25.2",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.2",
    "beautifulsoup4>=4.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
]

[project.scripts]
kg-api = "knowledge_graph.api.main:main"
kg-ui = "knowledge_graph.ui.app:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["knowledge_graph"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
pythonpath = [
    "src"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
